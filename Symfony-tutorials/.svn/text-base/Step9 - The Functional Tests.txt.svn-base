1. Tworzymy pierwszy test funkcjonalny. Dodajemy nowy plik: CategoryControllerTest.php

// src/Ens/JobeetBundle/Teste/Controller/CategoryControllerTest.php
namespace Ens\JobeetBundle\Tests\Controller;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
 
class CategoryControllerTest extends WebTestCase
{
  public function testShow()
  {
    $client = static::createClient();
 
    $crawler = $client->request('GET', '/category/index');
    $this->assertEquals('Ens\JobeetBundle\Controller\CategoryController::showAction', $client->getRequest()->attributes->get('_controller'));
    $this->assertTrue(200 === $client->getResponse()->getStatusCode());
  }
}

2. Uruchomienie testu

phpunit -c app/ src/Ens/JobeetBundle/Tests/Controller/CategoryControllerTest

Ten test nie powiedzie siê.


3. W pliku JobControllerTest.php zastêpujemy kod nastêpuj¹cym:

Expired jobs are not listed - wygas³e prace nie s¹ wyœwietlane na liscie

// src/Ens/JobeetBundle/Test/Controller/JobControllerTest.php
namespace Ens\JobeetBundle\Tests\Controller;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
 
class JobControllerTest extends WebTestCase
{
  public function testIndex()
  {
    $client = static::createClient();
 
    $crawler = $client->request('GET', '/');
    $this->assertEquals('Ens\JobeetBundle\Controller\JobController::indexAction', $client->getRequest()->attributes->get('_controller'));
    $this->assertTrue($crawler->filter('.jobs td.position:contains("Expired")')->count() == 0);
  }
}


4. Uruchomienie testu

phpunit -c app/ src/Ens/JobeetBundle/Tests/Controller/JobControllerTest


5. Only n jobs are listed for a category - wyœwietlanie prac z danej kategorii


	public function testIndex()
	{
	    $client = static::createClient();
	 
	    $crawler = $client->request('GET', '/');
	    $this->assertEquals('Ens\JobeetBundle\Controller\JobController::indexAction', $client->getRequest()->attributes->get('_controller'));
	    $this->assertTrue($crawler->filter('.jobs td.position:contains("Expired")')->count() == 0);
	    
	    
	   	$kernel = static::createKernel();
		$kernel->boot();
		$max_jobs_on_homepage = $kernel->getContainer()->getParameter('max_jobs_on_homepage');
		$this->assertTrue($crawler->filter('.category_programming tr')->count() == 10); // na liœcie jest wyœwietlanych 10 ofert danej kategorii
	    
	}

phpunit -c app/ src/Ens/JobeetBundle/Tests/Controller/JobControllerTest

6. Poprawka template
<!-- src/Ens/JobeetBundle/Resources/views/Job/index.html.twig -->
<!-- ... -->
 
    {% for category in categories %}</pre>
<div class="category_{{ category.slug }}"><!-- ... -->


7. Dodanie dwóch testów

// src/Ens/JobeetBundle/Test/Controller/JobControllerTest.php
// ...
 
$this->assertTrue($crawler->filter('.category_design .more_jobs')->count() == 0); //sprawdza czy jest wyœwietlany link more
$this->assertTrue($crawler->filter('.category_programming .more_jobs')->count() == 1); //sprawdza czy jest wyœwietlany link more
// ...


phpunit -c app/ src/Ens/JobeetBundle/Tests/Controller/JobControllerTest


8.Jobs are sorted by date - sprawdzenie sortowania wed³ug daty

	$kernel = static::createKernel();
	$kernel->boot();
	$em = $kernel->getContainer()->get('doctrine.orm.entity_manager');
 
	$query = $em->createQuery('SELECT j from EnsJobeetBundle:Job j LEFT JOIN j.category c WHERE c.slug = :slug AND j.expires_at > :date ORDER BY j.created_at DESC');
	$query->setParameter('slug', 'programming');
	$query->setParameter('date', date('Y-m-d H:i:s', time()));
	$query->setMaxResults(1);
	$job = $query->getSingleResult();
		 
	$this->assertTrue($crawler->filter('.category_programming tr')->first()->filter(sprintf('a[href*="/%d/"]', $job->getId()))->count() == 1);



Refaktoryzacja kodu:

	public function getMostRecentProgrammingJob()
	{
	  $kernel = static::createKernel();
	  $kernel->boot();
	  $em = $kernel->getContainer()->get('doctrine.orm.entity_manager');
 
	  $query = $em->createQuery('SELECT j from EnsJobeetBundle:Job j LEFT JOIN j.category c WHERE c.slug = :slug AND j.expires_at > :date ORDER BY j.created_at DESC');
	  $query->setParameter('slug', 'programming');
	  $query->setParameter('date', date('Y-m-d H:i:s', time()));
	  $query->setMaxResults(1);
	  return $query->getSingleResult();
	}

$this->assertTrue($crawler->filter('.category_programming tr')->first()->filter(sprintf('a[href*="/%d/"]', $this->getMostRecentProgrammingJob()->getId()))->count() == 1);


9.Each job on the homepage is clickable - sprawdzenie czy link na stronie jest klikalny

// src/Ens/JobeetBundle/Test/Controller/JobControllerTest.php
// ...
 
$job = $this->getMostRecentProgrammingJob();
$link = $crawler->selectLink('Web Developer')->first()->link();
$crawler = $client->click($link);
$this->assertEquals('Ens\JobeetBundle\Controller\JobController::showAction', $client->getRequest()->attributes->get('_controller'));
$this->assertEquals($job->getCompanySlug(), $client->getRequest()->attributes->get('company'));
$this->assertEquals($job->getLocationSlug(), $client->getRequest()->attributes->get('location'));
$this->assertEquals($job->getPositionSlug(), $client->getRequest()->attributes->get('position'));
$this->assertEquals($job->getId(), $client->getRequest()->attributes->get('id'));
// ...


10. Ca³y test JobControllerTest.php

<?php
// src/Ens/JobeetBundle/Test/Controller/JobControllerTest.php
 
namespace Ens\JobeetBundle\Tests\Controller;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
 
class JobControllerTest extends WebTestCase
{
  public function getMostRecentProgrammingJob()
  {
    $kernel = static::createKernel();
    $kernel->boot();
    $em = $kernel->getContainer()->get('doctrine.orm.entity_manager');
 
    $query = $em->createQuery('SELECT j from EnsJobeetBundle:Job j LEFT JOIN j.category c WHERE c.slug = :slug AND j.expires_at > :date ORDER BY j.created_at DESC');
    $query->setParameter('slug', 'programming');
    $query->setParameter('date', date('Y-m-d H:i:s', time()));
    $query->setMaxResults(1);
    return $query->getSingleResult();
  }
 
  public function getExpiredJob()
  {
    $kernel = static::createKernel();
    $kernel->boot();
    $em = $kernel->getContainer()->get('doctrine.orm.entity_manager');
 
    $query = $em->createQuery('SELECT j from EnsJobeetBundle:Job j WHERE j.expires_at < :date');     $query->setParameter('date', date('Y-m-d H:i:s', time()));
    $query->setMaxResults(1);
    return $query->getSingleResult();
  }
 
  public function testIndex()
  {
    // get the custom parameters from app config.yml
    $kernel = static::createKernel();
    $kernel->boot();
    $max_jobs_on_homepage = $kernel->getContainer()->getParameter('max_jobs_on_homepage');
    $max_jobs_on_category = $kernel->getContainer()->getParameter('max_jobs_on_category');
 
    $client = static::createClient();
 
    $crawler = $client->request('GET', '/');
    $this->assertEquals('Ens\JobeetBundle\Controller\JobController::indexAction', $client->getRequest()->attributes->get('_controller'));
 
    // expired jobs are not listed
    $this->assertTrue($crawler->filter('.jobs td.position:contains("Expired")')->count() == 0);
 
    // only $max_jobs_on_homepage jobs are listed for a category
    $this->assertTrue($crawler->filter('.category_programming tr')->count() == 10); 
    $this->assertTrue($crawler->filter('.category_design .more_jobs')->count() == 0);
    $this->assertTrue($crawler->filter('.category_programming .more_jobs')->count() == 1);

    // jobs are sorted by date
    $this->assertTrue($crawler->filter('.category_programming tr')->first()->filter(sprintf('a[href*="/%d/"]', $this->getMostRecentProgrammingJob()->getId()))->count() == 1);
 
    // each job on the homepage is clickable and give detailed information
    $job = $this->getMostRecentProgrammingJob();
    $link = $crawler->selectLink('Web Developer')->first()->link();
    $crawler = $client->click($link);
    $this->assertEquals('Ens\JobeetBundle\Controller\JobController::showAction', $client->getRequest()->attributes->get('_controller'));
    $this->assertEquals($job->getCompanySlug(), $client->getRequest()->attributes->get('company'));
    $this->assertEquals($job->getLocationSlug(), $client->getRequest()->attributes->get('location'));
    $this->assertEquals($job->getPositionSlug(), $client->getRequest()->attributes->get('position'));
    $this->assertEquals($job->getId(), $client->getRequest()->attributes->get('id'));
/* 
    // a non-existent job forwards the user to a 404
    $crawler = $client->request('GET', '/job/foo-inc/milano-italy/0/painter');
    $this->assertTrue(404 === $client->getResponse()->getStatusCode());
 
    // an expired job page forwards the user to a 404
    $crawler = $client->request('GET', sprintf('/job/sensio-labs/paris-france/%d/web-developer', $this->getExpiredJob()->getId()));
    $this->assertTrue(404 === $client->getResponse()->getStatusCode());
*/    
  }
}

11. Ca³y test CategoryControllerTest.php

<?php

// src/Ens/JobeetBundle/Test/Controller/CategoryControllerTest.php
 
namespace Ens\JobeetBundle\Tests\Controller;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
 
class CategoryControllerTest extends WebTestCase
{
  public function testShow()
  {
    // get the custom parameters from app config.yml
    $kernel = static::createKernel();
    $kernel->boot();
    $max_jobs_on_homepage = $kernel->getContainer()->getParameter('max_jobs_on_homepage');
    $max_jobs_on_category = $kernel->getContainer()->getParameter('max_jobs_on_category');
 
    $client = static::createClient();
 
    // categories on homepage are clickable
    $crawler = $client->request('GET', '/');
    $link = $crawler->selectLink('Programming')->link();
    $crawler = $client->click($link);
    $this->assertEquals('Ens\JobeetBundle\Controller\CategoryController::showAction', $client->getRequest()->attributes->get('_controller'));
    $this->assertEquals('programming', $client->getRequest()->attributes->get('slug'));
 
    // categories with more than $max_jobs_on_homepage jobs also have a "more" link
    $crawler = $client->request('GET', '/');
    $link = $crawler->selectLink('22')->link();
    $crawler = $client->click($link);
    $this->assertEquals('Ens\JobeetBundle\Controller\CategoryController::showAction', $client->getRequest()->attributes->get('_controller'));
    $this->assertEquals('programming', $client->getRequest()->attributes->get('slug'));
 
    // only $max_jobs_on_category jobs are listed
    $this->assertTrue($crawler->filter('.jobs tr')->count() == 10);
    $this->assertRegExp('/32 jobs/', $crawler->filter('.pagination_desc')->text());
    $this->assertRegExp('/page 1\/4/', $crawler->filter('.pagination_desc')->text());
 
    $link = $crawler->selectLink('2')->link();
    $crawler = $client->click($link);
    $this->assertEquals(2, $client->getRequest()->attributes->get('page'));
    $this->assertRegExp('/page 2\/4/', $crawler->filter('.pagination_desc')->text());
  }
}












